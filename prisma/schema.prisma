// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum ServiceAvailability {
  AVAILABLE
  BOOKED_OUT
  COMING_SOON
  LIMITED_AVAILABILITY
  UNAVAILABLE
}

enum ServiceCategory {
  HAIR
  NAILS
  WAX
}

enum BookingStatus {
  CANCELED_ON_TIME
  CANCELED_LATE
  COMPLETED_SUCCESS
  CONFIRMED
  NO_SHOW
  PENDING
}

enum EnumCategory {
  BLOG
  CASHAPP
  EP
  LINKTREE
  MERCH
  MUSIC
  OTHER
  SOCIALS
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt            DateTime              @default(now())
  updatedat            DateTime              @updatedAt
  email                String                @unique
  hashedPassword       String
  firstName            String?
  lastName             String?
  isAdmin              Boolean               @default(false)
  isSubscribed         Boolean               @default(true)
  sessions             Session[]
  Booking              Booking[]
  ResetPasswordSession ResetPasswordSession?
}

model Session {
  id        String   @id
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId    String   @db.Uuid
}

model ResetPasswordSession {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: userId, references: id)
  userId    String   @unique @db.Uuid
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  content     String
  description String
  slug        String   @unique
  published   Boolean  @default(false)
  tags        String[] @default([])
}

model Guest {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  email     String
  phone     String
  bookings  Booking[]
}

model Service {
  id           Int                 @id @default(autoincrement())
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  name         String
  description  String
  duration     Int
  availability ServiceAvailability @default(AVAILABLE)
  category     ServiceCategory
  price        Float
  slug         String              @unique
  bookings     Booking[]
  TimeSlot     TimeSlot[]
}

model Booking {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String?       @db.Uuid
  guestId   Int?
  serviceId Int
  dateTime  DateTime
  status    BookingStatus @default(PENDING)
  notes     String?
  user      User?         @relation(fields: [userId], references: [id])
  guest     Guest?        @relation(fields: [guestId], references: [id])
  service   Service       @relation(fields: [serviceId], references: [id])
}

model TimeSlot {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  day       DateTime
  startTime DateTime
  endTime   DateTime
  available Boolean  @default(true)
  service   Service? @relation(fields: [serviceId], references: [id])
  serviceId Int?
}

model SocialLinks {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  order     Int          @default(autoincrement())
  title     String
  url       String
  category  EnumCategory
  svg       String?
  icon      String?
}

model BlackoutDay {
  id        Int      @id @default(autoincrement())
  day       DateTime @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id             Int      @id @default(autoincrement())
  articleImgUrl  String
  contentMessage String
  contentAuthor  String
  linkUrl        String
  linkTitle      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// TODO add newsletter model: email, name, createdAt, updatedAt
// the isSubscribed bool on the user table for registered users will determine if they have a newsletter row
// unusbscribed users will only have a record in the newsletter table

// TODO add a model for time slots and calendar days
// 
