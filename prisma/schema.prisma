// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum EnumCategory {
  BLOG
  CASHAPP
  EP
  MERCH
  MUSIC
  OTHER
  LINKTREE
  SOCIALS
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime  @default(now())
  updatedat      DateTime  @updatedAt
  email          String    @unique
  hashedPassword String
  firstName      String?
  lastName       String?
  isAdmin        Boolean   @default(false)
  isSubscribed   Boolean   @default(true)
  sessions       Session[]
  Booking        Booking[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId    String   @db.Uuid
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  content     String
  description String
  slug        String   @unique
  published   Boolean  @default(false)
  tags        String[] @default([])
}

model Guest {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  email     String
  phone     String
  bookings  Booking[]
}

model Service {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String
  description  String
  price        Float
  duration     Int
  availability Boolean
  bookings     Booking[]
}

model Booking {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String?       @db.Uuid
  guestId   Int?
  serviceId Int
  dateTime  DateTime
  status    BookingStatus
  notes     String?
  user      User?         @relation(fields: [userId], references: [id])
  guest     Guest?        @relation(fields: [guestId], references: [id])
  service   Service       @relation(fields: [serviceId], references: [id])
}

model SocialLinks {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  order     Int          @default(autoincrement())
  title     String
  url       String
  category  EnumCategory
  svg       String?
  icon      String?
}
